/*
SQL scripts from my video on 7 SQL Things
*/

/*
Sample data for Window Functions
*/

CREATE TABLE orders (
  order_id INT,
  order_date DATE,
  order_total INT
);
INSERT INTO orders (order_id, order_date, order_total) VALUES
(1, '2022-04-03', 100),
(2, '2022-04-03', 250),
(3, '2022-04-04', 80),
(4, '2022-04-05', 10);

SELECT order_id, order_date, order_total
FROM orders;

/*
Window function example
*/

SELECT
order_id,
order_date,
order_total,
SUM(order_total) OVER (ORDER BY order_id ASC) AS running_total
FROM orders
ORDER BY order_id ASC;

/*
CTE Example
*/

WITH department_count AS (
  SELECT dept_id, COUNT(*) AS dept_count
  FROM employee
  GROUP BY dept_id
)
SELECT
e.first_name, 
e.last_name, 
e.dept_id,
d.dept_count
FROM employee e
INNER JOIN department_count d
ON e.dept_id = d.dept_id;

/*
Row Limiting - sample data
*/

CREATE TABLE cust_order (
  order_id INT,
  cust_id INT,
  order_value INT
);

INSERT INTO cust_order (order_id, cust_id, order_value) VALUES
(1, 2, 400),
(2, 1, 680),
(3, 1, 50),
(4, 4, 250),
(5, 3, 300),
(6, 6, 1400),
(7, 8, 180),
(8, 9, 600),
(9, 10, 390),
(10, 2, 810),
(11, 10, 950),
(12, 15, 1080),
(13, 18, 320),
(14, 12, 700),
(15, 11, 110),
(16, 3, 280);

/*
Row Limiting - MySQL and Postgres
*/
SELECT cust_id, SUM(order_value)
FROM cust_order
GROUP BY cust_id
ORDER BY SUM(order_value) DESC
LIMIT 5;


/*
Row Limiting - Oracle
*/
SELECT cust_id, SUM(order_value)
FROM cust_order
GROUP BY cust_id
ORDER BY SUM(order_value) DESC
FETCH FIRST 5 ROWS ONLY;

/*
Row Limiting - SQL Server
*/

SELECT TOP 5 cust_id, SUM(order_value)
FROM cust_order
GROUP BY cust_id
ORDER BY SUM(order_value) DESC;

/*
Auto Increment - Oracle Sequence
*/

CREATE SEQUENCE prod_sequence;

INSERT INTO product (product_id, product_name, price)
VALUES (prod_sequence.nextval, 'Desk chair', 50);

INSERT ALL
INTO product(product_id, product_name, price) VALUES (prod_sequence.nextval, 'Couch', 200)
INTO product(product_id, product_name, price) VALUES (prod_sequence.nextval, 'Chair', 150)
INTO product(product_id, product_name, price) VALUES (prod_sequence.nextval, 'Dining table', 400)
SELECT * FROM dual;

/*
Oracle identity
*/

CREATE TABLE product (
  product_id NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY,
  product_name VARCHAR2(200),
  price INT
);

/*
SQL Server
*/

CREATE TABLE product (
  product_id INT IDENTITY (1, 1) PRIMARY KEY,
  product_name VARCHAR(200),
  price INT
);

/*
MySQL
*/

CREATE TABLE product (
  product_id INT AUTO_INCREMENT PRIMARY KEY,
  product_name VARCHAR(200),
  price INT
);

/*
Postgres
*/

CREATE TABLE product (
  product_id INT SERIAL PRIMARY KEY,
  product_name VARCHAR(200),
  price INT
);


CREATE SEQUENCE prod_sequence
START 1
INCREMENT 1;

CREATE TABLE product (
  product_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  product_name VARCHAR(200),
  price INT
);

/*
Temp Table - Oracle
*/

CREATE GLOBAL TEMPORARY TABLE temp_customers (
id NUMBER(10),
cust_name VARCHAR2(100)
)
ON COMMIT DELETE ROWS;

CREATE PRIVATE TEMPORARY TABLE ora$ptt_temp_customers (
id NUMBER(10),
cust_name VARCHAR2(100)
)
ON COMMIT DROP DEFINITION;

/*
Temp Table - SQL Server
*/

CREATE TABLE #temp_customers (
id INT,
cust_name VARCHAR(100)
);


INSERT INTO #temp_customers (id, cust_name)
SELECT id, cust_name
FROM customer
WHERE cust_type = 'R';

/*
Temp Table MySQL and Postgres
*/

CREATE TEMPORARY TABLE temp_customers (
id NUMBER(10),
cust_name VARCHAR2(100)
);

/*
Bind Variables - Oracle and Postgres
*/

SELECT
case_id,
case_name,
case_status,
created_date
FROM submitted_cases
WHERE assigned_to_id = :user_id;

/*
Bind Variables - SQL Server 
*/

SELECT
case_id,
case_name,
case_status,
created_date
FROM submitted_cases
WHERE assigned_to_id = @user_id;

/*
Bind Variables - MySQL 
*/

SELECT
case_id,
case_name,
case_status,
created_date
FROM submitted_cases
WHERE assigned_to_id = ?;

/*
Pivot - Oracle
*/

SELECT *
FROM cust_sales
PIVOT (
  SUM(sale_amount)
  FOR customer_id
  IN (1, 2, 3, 4, 5, 6)
);

/*
Pivot - SQL Server
*/
SELECT
product_name,
North, Central, South, West
FROM (
  SELECT product_name, store_location, num_sales
  FROM product_sales
) AS alias_for_select
PIVOT
(
  SUM(num_sales)
  FOR store_location IN (North, Central, South, West)
) AS pivot_table;

/*
Pivot - MySQL
*/
SELECT
product_name,
SUM(CASE
  WHEN store_location = 'North' THEN num_sales ELSE 0 END
) AS north,
SUM(CASE
  WHEN store_location = 'Central' THEN num_sales ELSE 0 END
) AS central,
SUM(CASE
  WHEN store_location = 'South' THEN num_sales ELSE 0 END
) AS south,
SUM(CASE
  WHEN store_location = 'West' THEN num_sales ELSE 0 END
) AS west
FROM product_sales
GROUP BY product_name;

/*
Pivot - Postgres
*/

SELECT *
FROM   crosstab(
  'SELECT product_name, store_location, num_sales
  FROM   product_sales
  ORDER  BY 1,2'
) AS num_sales ("Product_Name" text, "North" text, "Central" text, "South" text, "West" text);